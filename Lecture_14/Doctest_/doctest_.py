# 1. Основы doctest


# -------------------------------------------------------------------------------------
# Проверка примеров в документации, регрессионное тестирование
# -------------------------------------------------------------------------------------
# Как вы помните из прошлых лекций, тройные двойные кавычки сразу после
# заголовка класса, функции или метода превращают текст внутри в строку
# документации соответствующего объекта. Например так может выглядеть
# простейшая (без оптимизации) функция, проверяющая является ли число простым
# или составным используя нахождение остатка от деления.

# def is_prime(p: int) -> bool:
#     """
#     Checks the number P for simplicity using finding the
#     remainder of the division in the range [2, P).
#     """
#     for i in range(2, p):
#         if p % i == 0:
#             return False
#     return True
#
#
# if __name__ == '__main__':
#     help(is_prime)

# -----------------------------------------------------------------------------------
# А теперь сделаем несколько запусков в терминале в режиме интерпретатора.
# >>> from doctest_ import is_prime
# >>> is_prime(42)
# False
# >>> is_prime(73)
# True
# -----------------------------------------------------------------------------------

# Если перенести вызов и результаты из консоли в строку документации функции
# (класса, модуля), получим тесты doctest. В нашем случае можно сделать так:
# В документацию добавлены строки вызова функции в режиме интерпретатора. Они
# начинаются с тройной стрелки и пробела. Сразу после идёт строка с ответом.
# В “нейм-мейн” спрятали импорт модуля doctest и вызов функции testmod для
# тестирования кода.
# 🔥 Важно! doctest запускает код и сравнивает возвращаемое значение в
# виде текста с текстов внутри строки документации. Если допустить опечатку,
# поставить лишние отступы или ещё как-то изменить текст ответа, тест будет провален.
# При запуске файла ничего не происходит. По умолчанию тестирование не выводит
# информации, если тесты прошли успешно. Попросим добавить вывод результатов в
# любом случае. Для этого исправим последнюю строку на
# doctest.testmod(verbose=True)
# Теперь перед нами подробный вывод того, что тесты пройдены успешно.


def is_prime(p: int) -> bool:
    """
    Checks the number P for simplicity using finding the
    remainder of the division in the range [2, P).
    >>> is_prime(42)
    False
    >>> is_prime(73)
    True
    """
    for i in range(2, p):
        if p % i == 0:
            return False
        return True


if __name__ == '__main__':
    import doctest
    doctest.testmod(verbose=True)


# # Запуск из терминала
# # Вызываем интерпретатор python и в качестве модуля указываем doctest. Далее
# # передаём путь до файла, который хотим тестировать. Если файл имеет расширение
# # py, запускаеты функция testmod (строки 1 и 2). А если у файла другое расширение,
# # предполагается что это исполняемая документация и запускается функция testfile
# # (строки 3 и 4). Дополнительный ключ -v включает режим подробного вывода
# # результатов тестирования.
#
# # (venv) PS C:\Users\user\Python_immersion> python -m doctest .\Lecture_14\tdd_.py
# # (venv) PS C:\Users\user\Python_immersion> python -m doctest .\Lecture_14\tdd_.py -v
# # (venv) PS C:\Users\user\Python_immersion> python -m doctest .\Lecture_14\prime.md -v
# # (venv) PS C:\Users\user\Python_immersion> python -m doctest .\Lecture_14\prime.md